;;
;;  ANSI COMMON LISP: 12. Numbers
;;

;;
;;  Function LOGAND
;;
(deftest logand.1
  (logand)
  -1)

(deftest logand.2
  (logand 10)
  10)

(deftest logand.3
  (logand 16 31)
  16)

(deftest logand.4
  (logand
    #b111100001111000011110000
    #b011110011110011001100110)
  #b011100001110000001100000)

(deftest logand.5a
  (logand
    #x4F7B9C0C7FF0742E5537ED43B7C32C52E336FB26A59F74B0369
    #x1BB47CEE9383B4CBC129966F98C74040F29B369AB0C893A3F62)
  #xB301C0C1380340A4121844390C30040E2123202A08810A0360)

(deftest logand.5b
  (logand
    #x-4F7B9C0C7FF0742E5537ED43B7C32C52E336FB26A59F74B0369
    #x1BB47CEE9383B4CBC129966F98C74040F29B369AB0C893A3F62)
  #x108460E2800380C18008122C080440001089049810408303C02)

(deftest logand.5c
  (logand
    #x4F7B9C0C7FF0742E5537ED43B7C32C52E336FB26A59F74B0369
    #x-1BB47CEE9383B4CBC129966F98C74040F29B369AB0C893A3F62)
  #x444B80006C7040241416690027002C120124C92405176410008)

(deftest logand.5d
  (logand
    #x-4F7B9C0C7FF0742E5537ED43B7C32C52E336FB26A59F74B0369
    #x-1BB47CEE9383B4CBC129966F98C74040F29B369AB0C893A3F62)
  #x-5FFFFCEEFFF3F4EFD53FFF6FBFC76C52F3BFFFBEB5DFF7B3F6A)

(deftest logand.6a
  (logand
    #xF4416C7C817EC952AEEB591BF97728B6394110BF3E01E8E31FAB618C157C0C0
    #x82E22B009100949DA8F0)
  #x28221009000801580C0)

(deftest logand.6b
  (logand
    #x-F4416C7C817EC952AEEB591BF97728B6394110BF3E01E8E31FAB618C157C0C0
    #x82E22B009100949DA8F0)
  #x80600A00010014882840)

(deftest logand.6c
  (logand
    #xF4416C7C817EC952AEEB591BF97728B6394110BF3E01E8E31FAB618C157C0C0
    #x-82E22B009100949DA8F0)
  #xF4416C7C817EC952AEEB591BF97728B6394110BF3E01C0C10FA261841424000)

(deftest logand.6d
  (logand
    #x-F4416C7C817EC952AEEB591BF97728B6394110BF3E01E8E31FAB618C157C0C0
    #x-82E22B009100949DA8F0)
  #x-F4416C7C817EC952AEEB591BF97728B6394110BF3E09EEE3BFAB718D5DFE900)

(deftest logand.7a
  (logand
    #xA1CE810EFCB0FF89E66D
    #x3D444BB90F8B3073E0BDB0724B980EB62E4373D15B358E7EB32E4346150C35)
  #x218E00022C0046010425)

(deftest logand.7b
  (logand
    #x-A1CE810EFCB0FF89E66D
    #x3D444BB90F8B3073E0BDB0724B980EB62E4373D15B358E7EB32E4346150C35)
  #x3D444BB90F8B3073E0BDB0724B980EB62E4373D15B14007EB1024300140811)

(deftest logand.7c
  (logand
    #xA1CE810EFCB0FF89E66D
    #x-3D444BB90F8B3073E0BDB0724B980EB62E4373D15B358E7EB32E4346150C35)
  #x8040810CD0B0B988E249)

(deftest logand.7d
  (logand
    #x-A1CE810EFCB0FF89E66D
    #x-3D444BB90F8B3073E0BDB0724B980EB62E4373D15B358E7EB32E4346150C35)
  #x-3D444BB90F8B3073E0BDB0724B980EB62E4373D15BB5CEFFBFFEF3FF9DEE7D)

(deftest logand.8a
  (logand
    #x235C6F50D5560915E27B3D922BD59D33C2A6CEAFB46618473B6CA53D125AA1E
    #x5E3AE5CBEF00000000000000000000000000000000000000000000000000)
  #x463005416000000000000000000000000000000000000000000000000000)

(deftest logand.8b
  (logand
    #x-235C6F50D5560915E27B3D922BD59D33C2A6CEAFB46618473B6CA53D125AA1E
    #x5E3AE5CBEF00000000000000000000000000000000000000000000000000)
  #x180AE08A8F00000000000000000000000000000000000000000000000000)

(deftest logand.8c
  (logand
    #x235C6F50D5560915E27B3D922BD59D33C2A6CEAFB46618473B6CA53D125AA1E
    #x-5E3AE5CBEF00000000000000000000000000000000000000000000000000)
  #x23580C508140000000000000000000000000000000000000000000000000000)

(deftest logand.8d
  (logand
    #x-235C6F50D5560915E27B3D922BD59D33C2A6CEAFB46618473B6CA53D125AA1E
    #x-5E3AE5CBEF00000000000000000000000000000000000000000000000000)
  #x-235DEFFEDDFEF00000000000000000000000000000000000000000000000000)

(deftest logand.9a
  (logand
    #x783EB6688800000000000000000000000000000000000000000000000000
    #x2B9FC6B4B6116F6B4CCAA09BAB1D0AE7A38F0FDED213CCB7A6CEB9407BF1F38)
  #x782A02600000000000000000000000000000000000000000000000000000)

(deftest logand.9b
  (logand
    #x-783EB6688800000000000000000000000000000000000000000000000000
    #x2B9FC6B4B6116F6B4CCAA09BAB1D0AE7A38F0FDED213CCB7A6CEB9407BF1F38)
  #x2B9844149011000000000000000000000000000000000000000000000000000)

(deftest logand.9c
  (logand
    #x783EB6688800000000000000000000000000000000000000000000000000
    #x-2B9FC6B4B6116F6B4CCAA09BAB1D0AE7A38F0FDED213CCB7A6CEB9407BF1F38)
  #x14B4088800000000000000000000000000000000000000000000000000)

(deftest logand.9d
  (logand
    #x-783EB6688800000000000000000000000000000000000000000000000000
    #x-2B9FC6B4B6116F6B4CCAA09BAB1D0AE7A38F0FDED213CCB7A6CEB9407BF1F38)
  #x-2B9FC7FFF699800000000000000000000000000000000000000000000000000)

(deftest logand.10a
  (logand
    #x6C10AFB82EE81843960AF6AC5364F20F5AFBB27387BFCE49D168CE117953798
    #xAAE8CC26DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
  #xAE8802681843960AF6AC5364F20F5AFBB27387BFCE49D168CE117953798)

(deftest logand.10b
  (logand
    #x-6C10AFB82EE81843960AF6AC5364F20F5AFBB27387BFCE49D168CE117953798
    #xAAE8CC26DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
  #xA0004C005E7BC69F50953AC9B0DF0A5044D8C784031B62E9731EE86AC868)

(deftest logand.10c
  (logand
    #x6C10AFB82EE81843960AF6AC5364F20F5AFBB27387BFCE49D168CE117953798
    #x-AAE8CC26DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
  #x6C1001302C80000000000000000000000000000000000000000000000000000)

(deftest logand.10d
  (logand
    #x-6C10AFB82EE81843960AF6AC5364F20F5AFBB27387BFCE49D168CE117953798
    #x-AAE8CC26DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
  #x-6C1AAFBCEEEE000000000000000000000000000000000000000000000000000)

(deftest logand.11a
  (logand
    #x344725DC7EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    #x836AFBBBC20225738BAD6822F7B0458310A7FAF547D533CDDA78F4C4884BEF4)
  #x24032400225738BAD6822F7B0458310A7FAF547D533CDDA78F4C4884BEF4)

(deftest logand.11b
  (logand
    #x-344725DC7EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    #x836AFBBBC20225738BAD6822F7B0458310A7FAF547D533CDDA78F4C4884BEF4)
  #x8368BB898200000000000000000000000000000000000000000000000000000)

(deftest logand.11c
  (logand
    #x344725DC7EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    #x-836AFBBBC20225738BAD6822F7B0458310A7FAF547D533CDDA78F4C4884BEF4)
  #x104401DC5CA8C745297DD084FBA7CEF58050AB82ACC3225870B3B77B410C)

(deftest logand.11d
  (logand
    #x-344725DC7EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    #x-836AFBBBC20225738BAD6822F7B0458310A7FAF547D533CDDA78F4C4884BEF4)
  #x-836BFFFBDFC7F00000000000000000000000000000000000000000000000000)

(deftest logand.12a
  (logand
    #x43926AE07D100372948FCFF2C5117D6B7FED03C5C9450B6
    #x23F55C42CDEDC8E585B84484D02975D8B6EE20848CC7FB9
    #x763103A52A68B1B68802E70AEE5451C415D4C9780BB28F
    #x23CDAC65E003D190B4C8202F7F6C61ACF157E39AA5B8D85)
  #x3000000400000000080000000004108004400808000080)

(deftest logand.12b
  (logand
    #x43926AE07D100372948FCFF2C5117D6B7FED03C5C9450B6
    #x-23F55C42CDEDC8E585B84484D02975D8B6EE20848CC7FB9
    #x763103A52A68B1B68802E70AEE5451C415D4C9780BB28F
    #x23CDAC65E003D190B4C8202F7F6C61ACF157E39AA5B8D85)
  #x20000001100000002004000000410100000000004)

(deftest logand.12c
  (logand
    #x43926AE07D100372948FCFF2C5117D6B7FED03C5C9450B6
    #x23F55C42CDEDC8E585B84484D02975D8B6EE20848CC7FB9
    #x-763103A52A68B1B68802E70AEE5451C415D4C9780BB28F
    #x23CDAC65E003D190B4C8202F7F6C61ACF157E39AA5B8D85)
  #x800840000000008408000040002000300000000000000)

(deftest logand.12d
  (logand
    #x-43926AE07D100372948FCFF2C5117D6B7FED03C5C9450B6
    #x-23F55C42CDEDC8E585B84484D02975D8B6EE20848CC7FB9
    #x-763103A52A68B1B68802E70AEE5451C415D4C9780BB28F
    #x-23CDAC65E003D190B4C8202F7F6C61ACF157E39AA5B8D85)
  #x-67FFFEFFFFFFDBFFFDFFEFFFFFFD7DFFFFFFEFDFEDFFFC0)

(deftest-error! logand-error.1
  (eval '(logand 4/5))
  type-error)


;;
;;  Function LOGANDC1
;;
(deftest logandc1.1
  (logandc1
    #x393B346AD21E3DDA071EC4
    #x8A72E1DA8DBB4F44CE8D2A)
  #x8240C1900DA14204C8812A)

(deftest logandc1.2
  (logandc1
    #x393B346AD21E3DDA071EC4
    #x-8A72E1DA8DBB4F44CE8D2A)
  #x-BB7BF5FADFBF7FDECF9FEE)

(deftest logandc1.3
  (logandc1
    #x-393B346AD21E3DDA071EC4
    #x8A72E1DA8DBB4F44CE8D2A)
  #x832204A801A0D40060C02)

(deftest logandc1.4
  (logandc1
    #x-393B346AD21E3DDA071EC4
    #x-8A72E1DA8DBB4F44CE8D2A)
  #x310914205204309A0112C2)

(deftest logandc1.5
  (let ((x #x393B346AD21E3DDA071EC4)
        (y #x8A72E1DA8DBB4F44CE8D2A))
    (eql (logand (lognot x) y)
         (logandc1 x y)))
  t)

(deftest logandc1.6
  (let ((x #x393B346AD21E3DDA071EC4)
        (y #x-8A72E1DA8DBB4F44CE8D2A))
    (eql (logand (lognot x) y)
         (logandc1 x y)))
  t)

(deftest logandc1.7
  (let ((x #x-393B346AD21E3DDA071EC4)
        (y #x8A72E1DA8DBB4F44CE8D2A))
    (eql (logand (lognot x) y)
         (logandc1 x y)))
  t)

(deftest logandc1.8
  (let ((x #x-393B346AD21E3DDA071EC4)
        (y #x-8A72E1DA8DBB4F44CE8D2A))
    (eql (logand (lognot x) y)
         (logandc1 x y)))
  t)

(deftest-error! logandc1-error.1
  (eval '(logandc1 10)))

(deftest-error! logandc1-error.2
  (eval '(logandc1 3/4 50))
  type-error)

(deftest-error! logandc1-error.3
  (eval '(logandc1 10 20 30)))


;;
;;  Function LOGANDC2
;;
(deftest logandc2.1
  (logandc2
    #x52FDFE24E59289EB088757
    #x348892E6AC6F7EA137B26A)
  #x42756C004190814A080515)

(deftest logandc2.2
  (logandc2
    #x52FDFE24E59289EB088757
    #x-348892E6AC6F7EA137B26A)
  #x10889224A40208A1008241)

(deftest logandc2.3
  (logandc2
    #x-52FDFE24E59289EB088757
    #x348892E6AC6F7EA137B26A)
  #x-76FDFEE6EDFFFFEB3FB77F)

(deftest logandc2.4
  (logandc2
    #x-52FDFE24E59289EB088757
    #x-348892E6AC6F7EA137B26A)
  #x240000C2086D7600373029)

(deftest logandc2.5
  (let ((x #x52FDFE24E59289EB088757)
        (y #x348892E6AC6F7EA137B26A))
    (eql (logand x (lognot y))
         (logandc2 x y)))
  t)

(deftest logandc2.6
  (let ((x #x52FDFE24E59289EB088757)
        (y #x-348892E6AC6F7EA137B26A))
    (eql (logand x (lognot y))
         (logandc2 x y)))
  t)

(deftest logandc2.7
  (let ((x #x-52FDFE24E59289EB088757)
        (y #x348892E6AC6F7EA137B26A))
    (eql (logand x (lognot y))
         (logandc2 x y)))
  t)

(deftest logandc2.8
  (let ((x #x-52FDFE24E59289EB088757)
        (y #x-348892E6AC6F7EA137B26A))
    (eql (logand x (lognot y))
         (logandc2 x y)))
  t)

(deftest-error! logandc2-error.1
  (eval '(logandc2 10)))

(deftest-error! logandc2-error.2
  (eval '(logandc2 3/4 50))
  type-error)

(deftest-error! logandc2-error.3
  (eval '(logandc2 10 20 30)))


;;  Function LOGEQV
(deftest logeqv.1
  (logeqv)
  -1)

(deftest logeqv.2
  (logeqv 100)
  100)

(deftest logeqv.3
  (logeqv
    #x71C657D7522BBCA4301E44
    #xC251F31E815F2A86687E41)
  #x-B397A4C9D3749622586006)

(deftest logeqv.4
  (logeqv
    #x71C657D7522BBCA4301E44
    #x-C251F31E815F2A86687E41)
  #xB397A4C9D3749622586004)

(deftest logeqv.5
  (logeqv
    #x-71C657D7522BBCA4301E44
    #xC251F31E815F2A86687E41)
  #xB397A4C9D3749622586002)

(deftest logeqv.6
  (logeqv
    #x-71C657D7522BBCA4301E44
    #x-C251F31E815F2A86687E41)
  #x-B397A4C9D3749622586004)

(deftest logeqv.7
  (logeqv
    #xAE05182A0278B7790B9A030FE47DF3B1
    #x54B7E0D4A8891BA756DA14CD7DE8548A
    #x816340D044F8F95674BA0C59D73E935E
    #x6C45D60CD4B0A6933145E3201CE10B93
    #x-C50C8C78AFEB8C31600FC60DF3B6EA61
    #x-DF18653BF02EECE56D146FCBC7E7ACB6
    #x-AE34C488D70A26BB5C64B527E03D47C1
    #x-C81BB81FF1978CE54103E172AB27E9B8)
  #x-6BAFFBF643E1399108C305282D01D755)

(deftest-error! logeqv-error.1
  (eval '(logeqv 4/5))
  type-error)


;;
;;  Function LOGIOR
;;
(deftest logior.1
  (logior)
  0)

(deftest logior.2
  (logior -100)
  -100)

(deftest logior.3
  (logior
    #x9D30D9178DF5F587B4A862
    #xFE18764CA04F8ADEC8B296)
  #xFF38FF5FADFFFFDFFCBAF6)

(deftest logior.4
  (logior
    #x9D30D9178DF5F587B4A862
    #x-FE18764CA04F8ADEC8B296)
  #x-62082648200A0A58481296)

(deftest logior.5
  (logior
    #x-9D30D9178DF5F587B4A862
    #xFE18764CA04F8ADEC8B296)
  #x-12089130DB07501340862)

(deftest logior.6
  (logior
    #x-9D30D9178DF5F587B4A862
    #x-FE18764CA04F8ADEC8B296)
  #x-9C1050048045808680A002)

(deftest logior.7
  (logior
    #xAE05182A0278B7790B9A030FE47DF3B1
    #x54B7E0D4A8891BA756DA14CD7DE8548A
    #x816340D044F8F95674BA0C59D73E935E
    #x6C45D60CD4B0A6933145E3201CE10B93
    #x-C50C8C78AFEB8C31600FC60DF3B6EA61
    #x-DF18653BF02EECE56D146FCBC7E7ACB6
    #x-AE34C488D70A26BB5C64B527E03D47C1
    #x-C81BB81FF1978CE54103E172AB27E9B8)
  #x-200000000000000000001)

(deftest-error! logior-error.1
  (eval '(logior 4/5))
  type-error)


;;
;;  Function LOGNAND
;;
(deftest lognand.1
  (lognand
    #xAA1355ACD3789E83205AE5
    #xDA43D15987AEBE4C7541C9)
  #x-8A03510883289E002040C2)

(deftest lognand.2
  (lognand
    #xAA1355ACD3789E83205AE5
    #x-DA43D15987AEBE4C7541C9)
  #x-201004A450500083001A26)

(deftest lognand.3
  (lognand
    #x-AA1355ACD3789E83205AE5
    #xDA43D15987AEBE4C7541C9)
  #x-504080510486204C55010A)

(deftest lognand.4
  (lognand
    #x-AA1355ACD3789E83205AE5
    #x-DA43D15987AEBE4C7541C9)
  #xFA53D5FDD7FEBECF755BEC)

(deftest lognand.5
  (let ((x #xAA1355ACD3789E83205AE5)
        (y #xDA43D15987AEBE4C7541C9))
    (eql (lognot (logand x y))
         (lognand x y)))
  t)

(deftest lognand.6
  (let ((x #xAA1355ACD3789E83205AE5)
        (y #x-DA43D15987AEBE4C7541C9))
    (eql (lognot (logand x y))
         (lognand x y)))
  t)

(deftest lognand.7
  (let ((x #x-AA1355ACD3789E83205AE5)
        (y #xDA43D15987AEBE4C7541C9))
    (eql (lognot (logand x y))
         (lognand x y)))
  t)

(deftest lognand.8
  (let ((x #x-AA1355ACD3789E83205AE5)
        (y #x-DA43D15987AEBE4C7541C9))
    (eql (lognot (logand x y))
         (lognand x y)))
  t)

(deftest-error! lognand-error.1
  (eval '(lognand 10)))

(deftest-error! lognand-error.2
  (eval '(lognand 3/4 50))
  type-error)

(deftest-error! lognand-error.3
  (eval '(lognand 10 20 30)))


;;
;;  Function LOGNOR
;;
(deftest lognor.1
  (lognor
    #x792A36F3B26AD04EEC191
    #x1500DCF419194303258C5C)
  #x-1792FFFF3B3FEF07EFCDDE)

(deftest lognor.2
  (lognor
    #x792A36F3B26AD04EEC191
    #x-1500DCF419194303258C5C)
  #x10005C9000194203010C4A)

(deftest lognor.3
  (lognor
    #x-792A36F3B26AD04EEC191
    #x1500DCF419194303258C5C)
  #x292230B2226AC04CA4180)

(deftest lognor.4
  (lognor
    #x-792A36F3B26AD04EEC191
    #x-1500DCF419194303258C5C)
  #x500806419000100248010)

(deftest lognor.5
  (let ((x #x792A36F3B26AD04EEC191)
        (y #x1500DCF419194303258C5C))
    (eql (lognot (logior x y))
         (lognor x y)))
  t)

(deftest lognor.6
  (let ((x #x792A36F3B26AD04EEC191)
        (y #x-1500DCF419194303258C5C))
    (eql (lognot (logior x y))
         (lognor x y)))
  t)

(deftest lognor.7
  (let ((x #x-792A36F3B26AD04EEC191)
        (y #x1500DCF419194303258C5C))
    (eql (lognot (logior x y))
         (lognor x y)))
  t)

(deftest lognor.8
  (let ((x #x-792A36F3B26AD04EEC191)
        (y #x-1500DCF419194303258C5C))
    (eql (lognot (logior x y))
         (lognor x y)))
  t)

(deftest-error! lognor-error.1
  (eval '(lognor 10)))

(deftest-error! lognor-error.2
  (eval '(lognor 3/4 50))
  type-error)

(deftest-error! lognor-error.3
  (eval '(lognor 10 20 30)))


;;
;;  Function LOGNOT
;;
(deftest lognot.1
  (lognot #xBE6BBA61618AB915487855)
  #x-BE6BBA61618AB915487856)

(deftest lognot.2
  (lognot #x-D7F0FD5CB20EBC851D0764)
  #xD7F0FD5CB20EBC851D0763)

(deftest lognot.3
  (lognot 0)
  -1)

(deftest lognot.4
  (let ((x #x-D7F0FD5CB20EBC851D0764))
    (eql (lognot (lognot x)) x))
  t)

(deftest-error! lognot-error.1
  (eval '(lognot)))

(deftest-error! lognot-error.2
  (eval '(lognot 3/4))
  type-error)

(deftest-error! lognot-error.3
  (eval '(lognot 10 20)))


;;
;;  Function LOGORC1
;;
(deftest logorc1.1
  (logorc1
    #x7C9A58ED632C20C71EB363
    #x52AABCA40F896CA4AA12A8)
  #x-2C1040496024004314A144)

(deftest logorc1.2
  (logorc1
    #x7C9A58ED632C20C71EB363
    #x-52AABCA40F896CA4AA12A8)
  #x-508A18A4030820840A1224)

(deftest logorc1.3
  (logorc1
    #x-7C9A58ED632C20C71EB363
    #x52AABCA40F896CA4AA12A8)
  #x7EBAFCED6FAD6CE7BEB3EA)

(deftest logorc1.4
  (logorc1
    #x-7C9A58ED632C20C71EB363
    #x-52AABCA40F896CA4AA12A8)
  #x-220A4000C814C20A00086)

(deftest logorc1.5
  (let ((x #x7C9A58ED632C20C71EB363)
        (y #x52AABCA40F896CA4AA12A8))
    (eql (logior (lognot x) y)
         (logorc1 x y)))
  t)

(deftest logorc1.6
  (let ((x #x7C9A58ED632C20C71EB363)
        (y #x-52AABCA40F896CA4AA12A8))
    (eql (logior (lognot x) y)
         (logorc1 x y)))
  t)

(deftest logorc1.7
  (let ((x #x-7C9A58ED632C20C71EB363)
        (y #x52AABCA40F896CA4AA12A8))
    (eql (logior (lognot x) y)
         (logorc1 x y)))
  t)

(deftest logorc1.8
  (let ((x #x-7C9A58ED632C20C71EB363)
        (y #x-52AABCA40F896CA4AA12A8))
    (eql (logior (lognot x) y)
         (logorc1 x y)))
  t)

(deftest-error! logorc1-error.1
  (eval '(logorc1 10)))

(deftest-error! logorc1-error.2
  (eval '(logorc1 3/4 50))
  type-error)

(deftest-error! logorc1-error.3
  (eval '(logorc1 10 20 30)))


;;
;;  Function LOGORC2
;;
(deftest logorc2.1
  (logorc2
    #x701EB39515992A5ED7B67F
    #xB741C9877630D6CCA3A6CD)
  #x-874148026220D480200081)

(deftest logorc2.2
  (logorc2
    #x701EB39515992A5ED7B67F
    #x-B741C9877630D6CCA3A6CD)
  #xF75FFB9777B9FEDEF7B6FF)

(deftest logorc2.3
  (logorc2
    #x-701EB39515992A5ED7B67F
    #xB741C9877630D6CCA3A6CD)
  #x-300081851410024C83A64D)

(deftest logorc2.4
  (logorc2
    #x-701EB39515992A5ED7B67F
    #x-B741C9877630D6CCA3A6CD)
  #x-401E321001892812541033)

(deftest logorc2.5
  (let ((x #x701EB39515992A5ED7B67F)
        (y #xB741C9877630D6CCA3A6CD))
    (eql (logior x (lognot y))
         (logorc2 x y)))
  t)

(deftest logorc2.6
  (let ((x #x701EB39515992A5ED7B67F)
        (y #x-B741C9877630D6CCA3A6CD))
    (eql (logior x (lognot y))
         (logorc2 x y)))
  t)

(deftest logorc2.7
  (let ((x #x-701EB39515992A5ED7B67F)
        (y #xB741C9877630D6CCA3A6CD))
    (eql (logior x (lognot y))
         (logorc2 x y)))
  t)

(deftest logorc2.8
  (let ((x #x-701EB39515992A5ED7B67F)
        (y #x-B741C9877630D6CCA3A6CD))
    (eql (logior x (lognot y))
         (logorc2 x y)))
  t)

(deftest-error! logorc2-error.1
  (eval '(logorc2 10)))

(deftest-error! logorc2-error.2
  (eval '(logorc2 3/4 50))
  type-error)

(deftest-error! logorc2-error.3
  (eval '(logorc2 10 20 30)))


;;
;;  Function LOGXOR
;;
(deftest logxor.1
  (logxor)
  0)

(deftest logxor.2
  (logxor -100)
  -100)

(deftest logxor.3
  (logxor
    #x59BD91DD857ED4CB3565B7
    #x2B419DC0AC809248E00131)
  #x72FC0C1D29FE4683D56486)

(deftest logxor.4
  (logxor
    #x59BD91DD857ED4CB3565B7
    #x-2B419DC0AC809248E00131)
  #x-72FC0C1D29FE4683D56488)

(deftest logxor.5
  (logxor
    #x-59BD91DD857ED4CB3565B7
    #x2B419DC0AC809248E00131)
  #x-72FC0C1D29FE4683D56488)

(deftest logxor.6
  (logxor
    #x-59BD91DD857ED4CB3565B7
    #x-2B419DC0AC809248E00131)
  #x72FC0C1D29FE4683D56486)

(deftest logxor.7
  (logxor
    #xAE05182A0278B7790B9A030FE47DF3B1
    #x54B7E0D4A8891BA756DA14CD7DE8548A
    #x816340D044F8F95674BA0C59D73E935E
    #x6C45D60CD4B0A6933145E3201CE10B93
    #x-C50C8C78AFEB8C31600FC60DF3B6EA61
    #x-DF18653BF02EECE56D146FCBC7E7ACB6
    #x-AE34C488D70A26BB5C64B527E03D47C1
    #x-C81BB81FF1978CE54103E172AB27E9B8)
  #x6BAFFBF643E1399108C305282D01D754)

(deftest-error! logxor-error.1
  (eval '(logxor 4/5))
  type-error)


;;  ANSI Common Lisp
(deftest logand-test.1
  (logior 1 2 4 8)
  15)

(deftest logand-test.2
  (logxor 1 3 7 15)
  10)

(deftest logand-test.3
  (logeqv)
  -1)

(deftest logand-test.4
  (logand 16 31)
  16)

(deftest logand-test.5
  (lognot 0)
  -1)

(deftest logand-test.6
  (lognot 1)
  -2)

(deftest logand-test.7
  (lognot -1)
  0)

(deftest logand-test.8
  (lognot (1+ (lognot 1000)))
  999)

(deftest logand-test.9
  (flet ((show (m x y)
               (list
                 (format nil "#o~6,'0O" m)
                 (format nil "#o~6,'0O" x)
                 (format nil "#o~6,'0O" y))))
    (let ((m #o007750)
          (x #o452576)
          (y #o317407))
      (values
        (show m x y)
        (let ((z (logand (logxor x y) m)))
          (setq x (logxor z x))
          (setq y (logxor z y))
          (show m x y)))))
  ("#o007750" "#o452576" "#o317407")
  ("#o007750" "#o457426" "#o312557"))

